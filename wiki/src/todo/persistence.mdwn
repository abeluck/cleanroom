Data persistence is a somewhat tricky topic in a Live system context,
especially one explicitely designed to avoid leaving any trace of
its use.

Some real-life usecases however require to setup some kind of
data persistence, which should then be carefully introduced
and supported.

Specification bits
==================

Once a persistent volume is enabled, two operation modes should be
supported:

* with read-write access in order to be allowed to update persistent
  files
* with read-only access to **only** be able to *use* persistent files
  (e.g. a GnuPG keyring) without leaving any new trace

Moreover:

* The persistent data must be stored using strong, well-known, Free
  Software, peer-reviewed encryption tools.
* Read-write access to a persistent data store must never be the
  default, and must require a voluntary user action, such as choosing
  "with read-write persistent data" non-default item in the boot menu.
* Blacklist fixed storage devices from the search for persistent
  volumes? Preventing the risk of using a malicious persistent volume
  seems more important than supporting the rare "I want to store my
  persistent volume on a fixed hard-disk" use-case.

Implementation
==============

Debian Live already supports
[several kinds of persistence](http://live.debian.net/manual/html/persistence.html).
The "home automounting" flavor seems like a nice starting point, but
it needs to be extended a bit:

* support a read-only mode (e.g. using aufs or similar), e.g.
  using a "persistent-ro" boot parameter
* support enabling `$HOME` persistence while disabling full
  persistence

Both seem easy to implement and contribute to the upstream
`live-initramfs` (everything happens in `scripts/live`).
