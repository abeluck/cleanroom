Data persistence is a somewhat tricky topic in a Live system context,
especially one explicitely designed to avoid leaving any trace of
its use.

Some real-life usecases however require to setup some kind of
data persistence, which should then be carefully introduced
and supported.

[[!toc levels=2]]

Usecases
========

[[!tag todo/research]]

What could be made persistent?
------------------------------

It remains to determine which usecases are of interest for our users
and thus should be support. Some possible ones are:

* All of /home is persistent. This is very convenient for users who
  have complex configurations for certain applications, like IMs,
  MUAs, gpg an the like.
  - Clueless users could do really bad configurations that would
    persist and thus expose them even after a reboot.
  - amnesia upgrades to configurations in $HOME would be pretty
    difficult to apply without breaking the users own configuration.
  - Great care should be given to the potential leaks of web browser
    cache and history, IM logs and similar applications and their
    data, so that even if the /home is compromised, it should be
    difficult for the attacker to tell what exact internet resources
    and services have been used. Unless the user has explicitly
    chosen to store such information (bookmarking a site, adding
    someone to their contact list or address book, activated IM chat
    logs etc.).
* System wide persistence. This would give users fine-grained control
  of the system and possibility to set it up exactly after their own
  expectations.
  - All the problems of a persistent /home applies but are amplified
    to a system-wide scale, for instance
      - users can also fuck up the firewall configuration
      - sensitive information may leak outside of /home, like to
        /tmp, /var/log etc.
      - get a persistent virus or other malware
  - amnesia upgrades would be near-impossible without breaking
    stuff.
* A persistent non-home data store for whatever random files the user
  wants to have persistent.
* Persistent application installations. If a user need some program
  not present in amnesia per default it can be quite annoying to fetch
  the apt information (which takes a lot of time over tor) and
  download it (also slow), it could be nice to have a persistent
  directory (or similar) where all .deb-files are installed during
  init.
* Persistent application specific configurations.
  - This might be relevant for the following applications:
      - gpg/ssh/vpn/OTR keys/configurations
      - certificates
      - IM and MUA configurations (since these can take a several
        steps to setup which is annoying to redo for every amnesia
        session)
      - I2P data/cache/log directory (/var/lib/i2p)
  - Perhaps it would be possible to make a tool so that the user can
    choose exactly what files/directories that should be persistent,
    and when to update them? Whith such a general solution the above
    things would not have to be implemented individually and could
    be present as default suggestions in the tool.

Persistence storage location
----------------------------

* Use persistence without a persistence media: an encrypted persistent
  archive could be remotely stored on existing storage services e.g.
  via IMAP or sftp. When the persistence feature is enabled **and** no
  persistence media is found locally, the user would be asked for a
  server address + login + password + encryption passphrase.

Specification bits
==================

Once a persistent volume is enabled, two operation modes should be
supported:

* with read-write access in order to be allowed to update persistent
  files
* with read-only access to **only** be able to *use* persistent files
  (e.g. a GnuPG keyring) without leaving any new trace; the
  (read-only) persistency store must be merged with a "diff" branch on
  ramdisk using aufs, so that the mountpoint is seen as writable by
  applications

Moreover:

* The persistent data must be stored using strong, well-known, Free
  Software, peer-reviewed encryption tools.
* Read-write access to a persistent data store must never be the
  default, and must require a voluntary user action, such as choosing
  "with read-write persistent data" non-default item in the boot menu.
* Blacklist fixed storage devices from the search for persistent
  volumes? Preventing the risk of using a malicious persistent volume
  seems more important than supporting the rare "I want to store my
  persistent volume on a fixed hard-disk" use-case.
  - grml's patch against `live-initramfs` to optionally set all
    harddisk devices to read-only mode was applied upstream as
    `97846cf1b1a`; this option should probably be forcibly enabled
    when the users chooses to activate some kind of persistency from
    the boot menu.

Implementation
==============

Debian Live already supports
[several kinds of persistence](http://live.debian.net/manual/html/persistence.html).

The "home automounting" flavor seems like a nice starting point to
implement full /home persistency but it needs to be extended a bit:

* support a read-only mode (e.g. using aufs or similar), e.g.
  using a "persistent-ro" boot parameter
* support enabling `$HOME` persistence while disabling full
  persistence

Both seem easy to implement and contribute to the upstream
`live-boot` (everything happens in `scripts/live`).

cryptsetup-encryption of the persistent volumes has been supported
since
[commit 5d38c26a3480357730c4913d298a1a6318a7b08c](http://lists.alioth.debian.org/pipermail/debian-live-changes/2008-February/002320.html)
to `live-initramfs`.

Persistence features are supposed to be rewritten in `live-initramfs`
2.x (i.e `live-boot`), see the "RFC: live-initramfs 2.x features"
thread on the [debian-live
mailing-list](http://lists.debian.org/debian-live/).

Neither home automounting nor `live-snapshot` currently fit the
application-specific configuration persistence use case. Both because
they are not finely grained enough and persist too much. The best path
to a usable implementation seems to improve `live-snapshot`; it seems
like a better starting point because it has an include list feature
(`/etc/live-snapshot.list`) and is kinder to USB sticks (think of
write wearing); what needs to be done (checked in live-boot 2.0~a16-1
due to working offline with an outdated Git working copy):

- Add support for file deletion (e.g. by replacing cpio with rsync).
- Add a read-only mode.
- There is no way to enable the home-sn kind of persistence while
  disabling others. We could either implement a simple whitelist-only
  `persistent-types=TYPE1,TYPE2,...` boot parameter or a full-featured
  whitelist+blacklist boot parameters set such as the one used in
  live-config (`live-config=`, `live-noconfig=`).
- Add a way to ignore internal hard disks when looking for persistence
  data.
- `live-snapshot` needs to be run as root; make it able to run with
  slightly less permissions (e.g. use sudo only when needed, or simply
  manage to run as a non-priviledged user for such kind of partial
  `$HOME` persistency.
- The persistence data search order is not well documented enough:
  live-sn and home-sn files are searched before accordingly labelled
  partitions.
- The `persistent=cryptsetup` boot parameter is undocumented. Moreover
  it is incompatible with `persistent=nofiles` which involves snapshot
  files are first searched on non-encrypted devices, then on encrypted
  ones. It probably should be made into a first-class independent
  parameter such as `persistent-encryption=cryptsetup`.
  `persistent-encryption=luks` would btw. be more correct and would
  allow adding support for plain dm-crypt mappings that are also setup
  with cryptsetup.
- The cryptsetup support is not able to deal with file-backed Luks
  snapshots. Do we need this? On the long run we would probably prefer
  supporting plain dm-crypt mappings hidden in files: something
  similar to the `live-media-offset` would be perfect; the UI side of
  it will be tricky if we want to ask the offset to the user; this
  could happen either in the boot menu or by hooking a menu
  that would probably run from inside the initramfs, before
  `scripts/live` attempts to copy snapshots data.
- The `do_snap_copy` sub-procedure calculates free memory but does not
  seem to check there is actually enough.

Remote persistence storage
--------------------------

- Is there a Fuse IMAP filesystem? Other ways to fetch a given email?

> duplicity, an encrypted backup solution has an IMAP backend since
> version 5.0.7 (6.x is available in lenny-backports and squeeze). It is
> able to backup and restore from a folder available in an email
> account. One downside: it uses Python's imaplib which does know
> how to connect to IMAP server with SSL or StartTLS, but not how
> to verify X.509 certificates.

- Encryption: symmetric GnuPG, encfs, ecryptfs, file-backed Luks or
  dm-crypt?
