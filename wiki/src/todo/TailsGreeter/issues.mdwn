This page lists the tails-greeter known issues.

[[!toc levels=2]]

This is related to tails-greeter as found in the master branch of
git://git.immerda.ch/tails/tails-greeter.git

# Regressions

## Breaks emergency shutdown button

... when logged without setting an admin password. Uses sudo?

> Release blocker.

## Breaks search engines localization

Since language is chosen at GDM time, our historical
live-config -based search engines localization does not work anymore.
It should be moved / converted to work with tails-greeter.

> Release blocker.

## Breaks console keyboard layout localization

If user choose locale, than console should be localized as well.

> The console is localized once the login/password was entered.
> That means the user must know how to type the login/password in
> QWERTY, which is a regression.

>> Minor, postponed.

# Bugs

## Keyboard layout widget not l10n'd with the selected language

Seems like all the UI's l10n is correctly updated on language change,
but the keyboard layout widget seems to be constantly displayed using
the default system language.

> Release blocker.

## Admin password description widget must wrap

Long text that describes the admin password feature should be wrapped
to fit on several short lines, rather than one huge one that may not
fit on the screen.

> Release blocker.

## Insane widgets used for long lists

Comboboxes with long lists are hard to use - should be done the same
way as GDM3 in Debian Squeeze: combobox contains default value and
"other..." option, clicking latter will bring up pop-up window with
long scrollable list of options and standard "ok", "cancel" buttons.

> Implemented for language, to be done for locale and keyboard. Minor,
> can be postponed: those lists are much shorter than the language
> one, so this is much less of a problem.

## Wrong icon used as langpanel's language label

langpanel: the icon used for the languages is "applications-internet" which
displays a globe in default icon theme, but could display something really
irrelevant in an other icon theme;

> Minor, postponed: we don't change the icon theme Tails uses every
> now and then.

## Scroll effect in language selection menu

langpanel: the languages menu has an horrible scroll effect at opening.
That's GTK magic that I don't know how to workaround: when poping up a
ComboBox, GTK places the selected entry under the cursor, thus not displaying
the whole menu where I want it to be;

> Minor, postponed: it's not perfect to they eye, sure, but it's
> perfectly usable.

# Missing features

## Communicate to other parts that persistence was enabled

Other programs, such as `tails-persistence-setup`, need to know
whether persistence was successfully enabled.

## GUI improvements

* separator between languages list and "Other..."

## Choose keyboard layout independently from the language

It's impossible to choose keyboard layout independently from the
language. Example use-case: X needs to get his GNOME UI in Italian,
because he happens to speak that language much better than English AND
faces an azerty keyboard (e.g. because he's traveling), also he does
not know touch-typing so the keyboard physical and logical layout have
to match.

## Locales should be generated in the background

Once a language is selected, while the user customizes other settings,
the locales should be generated. Login should be blocked (probably
with visual indication that something is going on) until locales
generation is finished.

It's not that simple to implement: t-g is executed as 'Debian-gdm' -
it can't run localedef to generate locale; we have to weight the risk
of sudo / suid vs. the user experience benefits.

> Minority report: waiting some time for locale generation to finish
> every time it's selected might be less preferred for some users than
> waiting for locale generation on login. Example use-case: user X
> selects fr_CA locale instead of fr_BE by mistake. In proposed
> scenario he have to wait for generation of useless locale, than
> select proper locale and wit for its generation too.

>> No. In proposed scenario, *login* would be blocked until the 1st
>> erroneous locales are generated, but nothing tells *correcting the
>> mistake by selecting the right locale* should be blocked. Obviously
>> it should not.
>>
>> In some cases, yes, login will be blocked twice as long in the
>> described failure case (unless the app, when another locale is
>> selected, is clever enough to kill the wrongly selected locale's
>> generation process before running the new one), and so? I think we
>> should optimize for the general case, not the "I clicked the wrong
>> locale" one. --intrigeri

> All that instead of waiting only once if user's choice is applied
> during PostLogin.

> If TailsGreeter have more than one screen,

>> As some point, it will.

> than locale generation can be started during transition between
> those screens (if this transition is reversible than additional
> complexity of tracking multiple subprocesses will be needed).

>> I don't see the point in arguing between which screens this should
>> run. My point is: to reduce waiting time, let's run *as soon as
>> possible* and *in the background* the blocking, long,
>> non-interactive process. The more you wait to run it, the more the
>> user chances to wait at some point grow. Makes sense, uh? --i.

## Appearance

See [[todo/windows_theme]].

# Fixed, testing required

## Admin credentials

If user have entered password than it should be asked to grant root
access, otherwise root access should be completely disabled. Testing:
"sudo ls" in terminal window should asks for the password and show the
content of the current directory. If user hasn't entered the password
in TailsGreeter than "sudo ls" should report error that user is not in
'sudoers' file. Similarly running "time-admin" utility and pressing
unlock button should allow user to alter time settings (for example -
add pool.ntp.org to the list of servers).

## Second login after user password was set

TailsGreeter uses hardcoded login and password values. That's why on logout the
password is reset back to default value to allow 2nd login even if user
password was set during 1st one.
