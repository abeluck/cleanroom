[[!meta title="tails-greeter design"]]

[[!toc levels=2]]

Design decisions:
=====================

- configuration storage: gconf (with potential migration in future (after gsoc) to gsettings-over-dconf).
[reasoning: need to be compatible with current debian-based builds]

- display manager: gdm (with potential migration in future (after gsoc) to LightDM)
[reasoning: need to be compatible with current debian-based builds]

- programming language: python
[reasoning: existing implementation gdm-community-greeter]

- project is based on [[https://code.launchpad.net/gdm-commmunity-greeter/]]
(reasoning: use of TranslatableWindow as a basis for implementation of [[todo/localization_at_runtime]])

- tails-greeter as part of dm preferred over custom dm
[reasoning: smaller amount of code, easier maintenance, easier extensibility in future (after gsoc)]

- repository layout: 'upstream' branch contains periodic snapshots of gdm-community-greeter, 'master' branch contains actual project code.
(reasoning: initially tails-greeter will stay rather close to gdm-community-greeter, later it might diverge pretty significantly)
 
## Localization notes:

### Design sketch:

- since locale generation and setup might be time consuming it's performed by program which runs in the background
- logon is allowed only after program completion
- window translation should be handled separately (via TranslatableWindow) to avoid blocking "in-between" two screens
- language change is irreversible e. g. done "once and for all" to avoid complexity of managing several locale generations running in parallel or start\stop of locale generator
- language and layout should be applied immediately as they are selected

### Design clarification:

When talking about language support in greeter it is important to distinguish between:

0. language support in tails: the locales available to use once user successfully logged-in
0. language support in greeter: the icons and translations which can be utilized by greeter itself before user logged in

The available locales dynamically populated into list. Once language is chosen corresponding translation is applied to the widget (if available) but actual locale generation is handled by external script (tails-lang-helper) which spawned into the background once button is clicked. 

The first argument for tails-lang-helper is the locale name (en_US for example) which is similar to 'localedef' command responsible for locale generation.
N. B: this interface is subject to change - better look into comments in tails-lang-helper directly.
If locale generation fails for some reason - display warning and proceed anyway.

##  Additional notes:

### Quick login:

Since greeter is shown with every login so there got to be a way to skip all the greeter screens and quickly login with the default settings with 1-click button.

### choice of programming language justification:

Python is selected as main language for the project because existing greeter made with python was found. This code will be used as a basis for the project.

### GDM notes

-GDM read autostart folder in unpredictable manner so dpkg-divert is required to properly disable existing greeter unless it's in separate .deb which could be removed

-GDM's dbus interface is "private":
which in this case means "unstable" so additional subtask would be to automate (to some extent at least) extraction of this undocumented interface from source code of particular GDM release in order to assist with porting to new version.

### packages 

#### diversion

post- and pre- install scripts are invoked on every upgrade to "be on a safe side": we apply diversion to gdm file which will effectively break logon procedure in the absence of tails-greeter. Hence - dumb but failsafe approach which makes lintian unhappy (override used to hide lintian error).

#### requirements

- build and install with debian-squeeze (as long as current tails is based on it)
- build and install with debian-sid (2nd priority - just to make portability and maintenance easier)


Following subtasks outlined initially
===========================

#### 1)  UI design with usability in mind.

I'm no specialist in UI I'll try to keep it to bare minimum and make UI design change as easy as possible by separating related parts from the rest of the code.

#### 2) Debian packaging

.deb packages will be created once there is at least some visible code made and will be updated regularly as project develops. dpkg-divert will be used to gracefully overwrite existing greeter program supplied by gdm.deb

#### 3) i18n/l10n

This is ongoing task - all the string in project should be handled with localization in mind. Note: runtime localization itself is a separate task described in [[todo/localization_at_runtime]].

#### 4) test automation

This is optional task (if time permits). However some (unit) tests will be developed alongside with actual code to make sure that stable enough builds could be created early in the project.
