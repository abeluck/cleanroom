[[!toc levels=4]]

# Rationale

Partial upgrades should provide only what has changed between two
releases (deltas) and have a way to apply those changes to the
previous version. 

At boot-time the security warning telling that a new Tails version is available
should provide an automated way of doing the upgrade.

# Definitions

* **update-description file**: a file that describes the update from
  a given version, to another, newer given version of a software
  product.
* **Incremental Upgrade Kit (IUK)**: a file that contains everything
  needed to update from.
* **full image**: a file that is sufficient to install and run Tails
  (currently, that means an ISO image).
* **target files**: the whole set of files included by reference into
  an update; e.g. this may be an IUK or a full image.

# Roadmap

[[!tag todo/code]]

## 1. Design

* Think the current design a bit deeper, discuss with other Tails
  developers, reach an agreement.

## 2. Infrastructure

* make it easy to **generate an Incremental Upgrade Kit** for a point release
* update **mirrors infrastructure** to support hosting Incremental Upgrade Kits

## 3. User interface

* make it easy to **install an Incremental Upgrade Kit**
* update the **security warning program**
* make it easy to **download an Incremental Upgrade Kit**

## 4. Documentation

### For users

Users must be explained how to download and install an Incremental
Upgrade Kit.

### For developers

* update **[[design documentation|contribute/design]]**
* update **[[release process|contribute/release_process]]**
* document what and how to **test** when [[preparing a Tails
  point-release|contribute/release_process/test]]

# Scenarios

## As a Tails user

### When I boot Tails

#### Given Tails knows that no update is available

I should not be told anything about updates.

#### Given Tails cannot determine whether an update is available

I should be pointed to documentation about what to do in this case.

#### Given Tails knows that an incremental update is available

I should be guided through the process of updating Tails.

* I should be proposed to perform this incremental update:
  - I should be told what version I would get as a result.
  - I should be told how large are the files that must be downloaded
    to perform this update.
  - I may be pointed to an URL that contains more detailed information
    about this update.
  - I may be proposed to see the target files downloaded in the clear,
    that is without going through the Tor network.
* When the target files are being downloaded, I should be told what is
  happening, and asked to wait.
* If the target files cannot be downloaded, I should be pointed to
  documentation about what to do in this case. Beforehand, I may be
  proposed to retry.
* If the downloaded target files cannot be verified, I should be
  pointed to documentation about what to do in this case. Beforehand,
  I may be proposed to download the target files again.
* If the downloaded target files are successfully verified, the update
  process should go on and I should be told the incremental update is
  being applied.
* If the incremental update fails to be applied, I should be pointed
  to documentation about what to do in this case. My Tails may be left
  in a broken state, as long as I am told what broke, and pointed to
  documentation that explains me how to repair it (possibly by
  re-installing from scratch, or by performing a full update).
* Once the incremental update has been applied, I may be proposed to
  save a copy of the target files to a location of my choosing.
* Once the incremental update has been applied, I should be asked to
  reboot my Tails so that the update is effective.

#### Given Tails knows that no incremental update is available, but that a full update is

I should be guided through the process of updating Tails: in phase
one, I should be pointed to the web page that announces the new
release, just like in Tails 0.11 and older.

When I perform the full update using the Tails USB installer,
I should get a working and updated Tails as a result.

## As a Tails developer

### When I prepare a point-release

#### I should prepare an IUK

* When I run `tails-gen-iuk old.iso new.iso`, then I should get an
  IUK. More scenarios about this are described in Cucumber-style,
  using [[!cpan Test-BDD-Cucumber]], in the `features` directory of
  the `tails-iuk` [[contribute/Git]] repository (FIXME: not publicly
  available yet). Use the `pherkin` command to run them.

#### I should test the IUK

FIXME

#### I should prepare update-description files

FIXME

* for the previous release (to announce they may update using the IUK
  that's being prepared)
* for the new release (to announce no update is available)

#### I should publish the IUK

FIXME

#### I should publish update-description files

FIXME

### When I prepare a major release

FIXME

#### I should prepare an update-description file

FIXME

* for the previous release (to announce they may update using the
  release that's being prepared)
* for the new release (to announce that no update is available)

#### I should publish the update-description file

FIXME

# Implementation

## Upgrade paths

To ease implementation, only upgrades to the next closest step
are supported in phase one.

E.g. say one has installed Tails 0.11 a while ago, and forgets
about it. We then release Tails 0.11.1, and publish a `0.11_to_0.11.1`
IUK, advertised by the update-description file for 0.11 users. We then
release Tails 0.11.2, and publish a `0.11.1_to_0.11.2` IUK, advertised
by the update-description file for 0.11.1 users. If the user starts
their Tails 0.11, the upgrade system proposes upgrading to 0.11.1.
Say the user accepts, the upgrade is performed, the user reboots, and
the upgrade system now proposes upgrading to 0.11.2.

Allowing to run these two steps in a row, without rebooting, is
mainly a GUI problem, and is postponed.

## Infrastructure

### generate an IUK

We need a program that takes two Tails full images as input, and:

* builds the "diff" SquashFS
* gets the new kernel(s), initrd(s), bootloader configuration
* brings all this together into a single file, in the IUK format

### Incremental Update Kit

#### IUK format

An IUK is a tar archive, compatible with GNU tar, that contains the
following files:

* `FORMAT`: contains the version of the IUK format (that is *1*), as
  a positive integer encoded in ASCII.
* `control.yml`: YAML associative array with the following keys:
  - `delete_files`: a list of files to delete from the
    system partition.
* zero, one or more `*.tar[.xz]`: tar archives, compatible with GNU tar, optionally
  compressed with XZ, that contain the set of files to add to, or
  update in the system partition: kernel(s), initrd(s), bootloader
  configuration, `*.squashfs` (the SquashFS "diff" that must be
  stacked on top of the older SquashFS filesystem(s)), etc.

File paths, both in `*.tar[.xz]` and in the `delete_files` list, are
relative to the Tails system partition root, and must be compatible
with a FAT32 filesystem.

Tarballs contained in the IUK are meant to be extracted, one after the
other, sorted by ASCII order.

#### Initial implementation details

(This section is not a specification.)

The initial IUK generator will ship those files in every IUK:

* `system.tar` contains files that are already compressed
  (e.g. kernel, initrd, `*.squashfs`)
* `boot.tar.xz` contains files that are not compressed already
  (that is the syslinux configuration)

These are implementation details the IUK installer software must not
rely upon.

### mirrors infrastructure

Using something like [Mozilla's
channels](https://wiki.mozilla.org/Software_Update:Channels)
(*stable*, *beta*, *nightly*) would e.g. allow us to push beta
updates earlier to a brave subset of users. Subscribing to a channel
other than *stable* is something that would be worth
[[persisting|doc/first_steps/persistence]]. We are not likely to
implement a channels system in phase one, but the infrastructure we
setup should leave room for such future extension.

### Update-description files

We want the client to get an answer to questions such as "I run
version N of product P on architecture A, what stable release update
is available?". To allow us changing the way the answer is computed in
the future, the amount of work done on the client's side should be
kept to a minimum. So, let's insert a level of indirection, and
pre-compute server-side the answer to the queries we want to support.

The answers are distributed on our HTTP servers in the form of a set
of update-description file files.

All the client has to do is:

* build the URI to its update-description file (could even be done at
  build time and hard-coded into the image) and to its cryptographic
  signature
* fetch the update-description file and its signature at these URIs
* verify the cryptographic signature of the update-description file
* check that content of the update-description file matches the
  currently running system (in terms of product name, product
  version, build-target and channel)
* extract information about available updates from the
  update-description file
* do something simple and not-that-clever with this information

#### update-description file URL

* `https://tails.boum.org/update`
* URL schema version (so we can change it in the future), that is `v1`
  to start with.
* product name (e.g. *Tails*, but some day we may have *TailsServer*,
  *TailsHandheld* or whatever)
* product version -- the currently running version to upgrade from,
  e.g. *0.11* or *0.11.1*
* build-target (e.g. *i386*)
* channel (e.g. *stable* or *beta*)
* `update.yml`

Example: <https://tails.boum.org/update/v1/Tails/0.11/i386/beta/updates.yml>

Such a file shall be shipped along with its OpenPGP detached signature
(`updates.yml.pgp`).

#### update-description file format

An update-description file contains a YAML associative array with the
following top-level keys:

* `product-name`
* `product-version`
* `build-target`
* `channel`
* `updates`: a list of update elements.

Each update element is itself an associative array describing an
update to an individual product version, with the following keys:

* `version` -- the version of this update, that is the version of the
  running product after the update is completed and the system
  restarted (e.g. *0.11.1*)
* `type` -- *major* or *minor* (in phase one, all IUK will be about
  point-releases, and the type will therefore always be *minor*, but
  let's make room in case we want to announce major releases this way
  too at some point)
* `details-url` (optional) -- a URL to a web page with more
  information about the specified update (e.g.
  <https://tails.boum.org/news/version_0.11.1/>)
* `update-paths` -- a list of at least one and no more than two
  update path elements.

An update path element describes a set of target files that lives on
a remote server that must all be downloaded and applied to the product
to update it to that version. The keys for an update path element are
as follows:

* `type` -- *full* or *incremental* (IUK are about incremental
  upgrades, but let's make room to announce full images this way too
  at some point)
* `target-files`: a list of target files for this upgrade path.

Every target file element has the following keys:

* `url` -- A URL to the target file.
* `size` -- The size of the update, in bytes.
* `sha256` -- The SHA-256 hash of the patch file. If the client
  generated value does not match this, the integrity check fails after
  download. (Other kind of hashes may be added in a future revision of
  the update-description file format -- which of these multiple hashes
  the client must verify will need to be specified when this happens.)

Example that would be found at
<https://tails.boum.org/update/v1/Tails/0.11.1/i386/stable/updates.yml>:

	product-name: Tails
	product-version: 0.11.1
	channel: stable
	build-target: i386
	
	updates:
	  - version: 0.11.2
	    type: minor
	    details-url: https://tails.boum.org/news/version_0.11.2/
	    update-paths:
	      - type: incremental
	        target-files:
	          - url: http://dl.amnesia.boum.org/tails/stable/iuk/Tails_i386_0.11.1_to_0.11.2.iuk
	            size: 37345648
	            sha256: 5c5c47f6155e7807c971251fdad28d5f72ff78db446e43a41e4b900f29229a7d
	      - type: full
	        target-files:
	          - url: http://dl.amnesia.boum.org/tails/stable/tails-i386-0.11.2/Tails-i386-0.11.2.iso
	            size: 762123456
	            sha256: 1015e37e14c6daaecd528b4a841ef6ac2156a5790346d0fd036f9566ce5f641b

### Initial implementation details

This section is not a specification. The URL where the IUK's are
stored, and their file name, may change. If this happens, any
update-description file available on Tails HTTP mirrors, that
references an IUK whose URL changes, must be updated accordingly.

#### IUK file basename

An IUK's file basename is not an authoritative source of information
regarding its content. However, it should be unique (among IUKs that
exist on the Tails HTTP servers at a given time).

An IUK's file name is built from these underscore-separated elements,
followed by the `.iuk` suffix:

* product name (e.g. *Tails*)
* build-target (e.g. *i386*)
* product version -- the currently running version to upgrade from,
  e.g. *0.11* or *0.11.1*
* `to`
* the version of this update, that is the version of the running
  product after the update is completed and the system restarted (e.g.
  *0.11.2*)

Example: `Tails_i386_0.11.1_to_0.11.2.iuk`

#### IUK URL

A given IUK is meant to be made available at the URL composed from:

* `http://dl.amnesia.boum.org/tails/iuk/`
* the IUK file basename

Example: <http://dl.amnesia.boum.org/tails/iuk/Tails_i386_0.11.1_to_0.11.2.iuk>

## Client and user interface

### install an IUK

Once a user has downloaded an IUK, they must have it installed.

We need an installer for IUKs.

This should happen at the same time as normal Tails operation,
but very carefully, because we need to remount the boot medium
read-write.

* Tell the user we're going to run the upgrade.
* Remount the boot-medium read-write.
* Verify the IUK is in a supported format.
* Extract the IUK archive.
* Move stacked squashfs found in the IUK in place.
* Extract tarballs (`*.tar[.xz]`) contained in the IUK, one after the
  other, sorted by ASCII order.
* Delete files that are listed in the `delete_files` control field.
* Append the new SquashFS diff file name to the `live/Tails.module`
  file, in the Tails system partition.
* Remount the boot-medium read-only.
* Tell the user the upgrade process is finished.
* Reboot.
* Something must delete the IUK archive at some point.

As much as possible, any error condition must trigger remounting the
boot-medium read-only.

Resources:

* [Mozilla's updates
  processing](https://wiki.mozilla.org/Software_Update:Processing_Updates):
  building up some mechanism (such as their pending / applying /
  succeeded / failed status) to avoid retrying the same buggy update
  in a loop seems worth being considered.

### full update

The Tails USB installer is still in charge of performing full updates.
It must delete any `live/*.squashfs` file other than the one shipped
in the new ISO.

### signature verification

update-description file polling and parsing will be implemented in
Perl. Signature verification will be made using `GnuPG::Interface`'s
`verify` method.

The verify method is run on a `GnuPG::Interface` object built with
`--homedir` pointed to a dedicated keyring directory, created at Tails
boot or ISO build time, that contains only the Tails signing public
OpenPGP key, which is assigned the minimum level of trust so that
GnuPG trusts the signatures made with the corresponding private key.

The `verify` method return value is `waitpid`'d for, and the GnuPG
child process exit status examined (zero means verification succeeded,
non-zero means verification failure).

### security warning program

The program currently telling that a new Tails version is available
should be adapted. Instead of the current Atom feed, it should
download, verify and use the appropriate update-description file.

run (or point at) the
downloader program if the new version is a point-release, and else
point at full upgrade documentation.

* Detects if the new version is a point-release.
* Points at the downloader.

**FIXME**: this separation of tasks and interface between security warning
program and downloader is wrong and must be thought through.

### download target files

**FIXME**: tasks separation and interface between security warning
program and downloader is wrong and must be thought through.

Write a downloader for Incremental Upgrade Kits.

* Takes two versions as arguments, downloads the target files.
* Start the installer.
* Bonus points if there's an opt-in way to have the download happen in
  the clear, that is without going through the Tor network.
* Allow overriding the URL for dev / testing purpose.

# Code

* Integration work is being done in the `feature/incremental-upgrades`
  branch of the main Tails [[contribute/Git]] repository.

# Security

We want to use tools such as TUF or Thandy once they are ready for
production use.

Until then, we will content ourselves with a much simpler system that
is clearly less secure than TUF or Thandy against certain types of
attacks, but is at least as secure as the way users are currently able
to manually check if a new Tails version is available.

## Update-description files

* update-description files are published on <https://tails.boum.org/>.
* The upgrade client checks the SSL certificate presented by the
  server is valid (in phase one, using simple CA-based validation;
  instead using Monkeysphere would be a great future improvement).
* All update-description files are signed by the Tails OpenPGP
  signing key.

## Target files

* Communication to HTTP servers that provide target files is likely to
  be made in cleartext (`http://`). No security is to be expected from
  transport-level security here. Mirrors are not trusted anyway.
* Hashes for target files are published in update-description files,
  that are themselves signed by the Tails OpenPGP signing key.

## Discussion

We believe this upgrade system has the same security properties as the
way users are currently able to manually check if a new Tails version
is available.

More precisely:

* Mounting *Rollback* and *Indefinite freeze* attacks requires either
  to take control of the Tails website or to break the SSL/TLS
  connection between the client and the server.
* **FIXME**: discuss other attacks listed in the TUF
  security documentation.

## Amnesia vs. old metadata attacks

[TUF security
documentation](https://www.updateframework.com/wiki/Docs/Security)
defines two attacks that have specific implications in the context of
an amnesic system:

> **Rollback attacks**. An attacker presents a software update system
> with older files than those the client has already seen, causing the
> client to use files older than those the client knows about.
> 
> **Indefinite freeze attacks**. An attacker continues to present
> a software update system with the same files the client has already
> seen. The result is that the client does not know that new files
> are available.

TUF offers two ways to protect clients against such attacks:

1. The client *remembers* what metadata it has seen already.
2. Signatures on metadata *expire*.

In the context of an amnesic system such as Tails, the first
protection cannot be available by default. It may be offered, opt-in,
to the user who enables [[doc/first_steps/persistence]], but users who
do not to opt-in for making this information persistent cannot
possibly be protected against rollback attacks: signature expiry only
*limits* the extent to which a rollback attack can be conducted.

Therefore, signatures on metadata shall expire quickly.

# Research

## Secure update

* [TUF: The Update Framework](https://www.updateframework.com/)
* [Thandy specification](https://gitweb.torproject.org/thandy.git/blob_plain/HEAD:/specs/thandy-spec.txt)

## Stacking squashfs images

Tails filesystem is already using `aufs` to provide a read-write filesystem on
top of the read-only `squashfs` image.

This system could probably be extended to support mounting multiple `squashfs`
filesystems on top of each others. Upgrades would be `squashfs` images with only
the files that have been modified since the previous releases. This handles file
deletions.

Shipping upgrades could be as simple as shipping those extra `squashfs` images.

Debian live supports such stacking already: see in `live-boot(7)` the
part about `/live/filesystem.module`.

Stacking squashfs images like this would still lack a way of upgrading the
kernel and the syslinux. This should also be handled by the automated upgrade
process.

### Initial test

Here is a test. First the procedure to create the *delta* squashfs image, to be
done as `root`:

    mkdir /mnt/tails-0.7.1
    mkdir /mnt/tails-0.7.2
    mount -o loop tails-i386-0.7.1.iso /mnt/tails-0.7.1
    mount -o loop tails-i386-0.7.2.iso /mnt/tails-0.7.2
    mkdir /mnt/tails-0.7.1-root
    mkdir /mnt/tails-0.7.2-root
    mount -o loop /mnt/tails-0.7.1/live/filesystem.squashfs /mnt/tails-0.7.1-root
    mount -o loop /mnt/tails-0.7.2/live/filesystem.squashfs /mnt/tails-0.7.2-root

    mkdir /mnt/upgrade-0.7.1-to-0.7.2
    mount -t tmpfs tmpfs /mnt/upgrade-0.7.1-to-0.7.2

    mkdir /mnt/union
    mount -t aufs -o br=/mnt/upgrade-0.7.1-to-0.7.2=rw:/mnt/tails-0.7.1-root=ro none /mnt/union
    rsync -avP --delete-after /mnt/tails-0.7.2-root/ /mnt/union/

    mksquashfs /mnt/upgrade-0.7.1-to-0.7.2 upgrade-0.7.1-to-0.7.2.squashfs

Compressed size (using default gzip compression) is 82 MB.

Not bad, and the new kernel is included, which can probably be avoided.

Now, let's upgrade an USB stick:

    mkdir /media/disk/live
    cp   /mnt/tails-0.7.1/live/filesystem.squashfs \
         upgrade-0.7.1-to-0.7.2.squashfs \
         /mnt/tails/0.7.2/live/vmlinuz \
         /mnt/tails/0.7.2/live/initrd.img \
       /media/disk/live

Then fiddle with GRUB or EXTLINUX.

On boot, the new squashfs gets properly integrated. *Whiteouts* are not
working. It looks like the `live-boot` 2.x mount options miss the `wh` attribute.
But wait, booting with `break=top` and modifying `/scripts/live` to replace
`roopt=rr` by `roopt=rr+wh` is enough to do the trick! Therefore,
we've added the `wh` attribute to `live-boot` 3.x.

Initial test is pretty conclusive!

## Discarded options

See the [[page about discarded options|todo/incremental_upgrades/archive]].

# Future improvements

## Multi-step incremental upgrade

E.g. 0.11 boots after 0.11.1 and 0.11.2 are out. Tails fetches
https://tails.boum.org/update/v1/Tails/0.11/i386/stable/updates.yml,
that shall contain an incremental upgrade path with two target files:
the 0.11 to 0.11.1 IUK, and the 0.11.1 to 0.11.2 IUK. The updater
would download these two files and install the two IUKs in the
correct order.
