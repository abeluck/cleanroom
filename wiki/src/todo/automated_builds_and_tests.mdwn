[[!tag todo/code]]

[[!toc levels=2]]

Rationale
=========

An automated build and test environment would be pretty useful to
ensure a few facts:

- new code does not break anything
- new build tools (`live-build`) and included software
  (`live-config`, `live-boot`) don't break anything
- the quality of our releases is good enough
- every developer can comfortably test his/her code without owning
  modern high-end hardware (8GB RAM is needed in order to build
  a Tails image in tmpfs).


What we have
============

## Automated builds

There is actually a buildbot instance that is automatically building the
`devel`, `testing` and `stable` branch.
No build results are actually kept, as there isn't a way for developpers
to start and test them remotely.

## Setup

Our buildbot's instance is running inside a KVM.

The host system is using libvirt to manage the different VMs it's
hosting.

We are actually using custom buildbot package, as the one from Debian
are outdated. Work is done with others to have a better Debian
packaging, reporting bug [[!debbug 587313]], working on the package and
pushing uptream changes that would make buildot sit better in a Debian
environnement (init script/upstart, log rotation,...)

## Left to do

1. Custom notifications when a build fails, the one actually send miss
   some usefull informations.
2. Ask a mailing list to have buildbot sending it's build error reports
   there.
3. See if we want buildbot being able to send build report to specified
   email address when someone hit the "Build" button on its webpage,
   rather to bug everyone on the list.
2. allow developers to have their personal branch(es?) autobuilt as
   well => help developers test their code *before* pushing it to the
   `devel` branch.


What we need
============

## Automated tests

Having test automation for every build, implementing programatically the
[[release tests|contribute/release_process/test]] actually done
by hands on every release, and maybe more.

Buildbot should also be able to drive the automated test phase. One way
would be to have the slave talking to the libvirt daemon running on the
host system, asking to start the last build iso, then run tests on it.
This has some requirements to work though :

* Tests have to be in the tails sources, so that the slave is able to
  run them.
* There might be some cases where the tests have to be started
  from inside the tested tails system. In this case, the easiest way
  might be to have this tests included in the tails release. That might
  be an interesting idea for other moments, like for bug reporting or to
  provide users a way to test a functionnality themselves. But then,
  ways have to be defined for the slave to start the tests inside the
  remote VM and get their return codes (maybe sikuli might be of some
  help here?) so that it can reports which one failed.


## Manual tests

One of the feature we want is the ability for developpers to have an
easy process to start the last build done from their commit so that they
can test their changes.

As the machine used to run the buildbot instance doesn't have a lot of
bandwidth, the most convenient way to go would be to start the build iso
in a kvm instance, and have the developpers connect via VNC to this VM,
rather to have to download the build iso image and test it on their
own machine.

A tricky feature is that the developper might need to connect to the KVM
at early boot stage, e.g if they need to test some changes in the boot
options.

Libvirt supports [remote connections](http://libvirt.org/remote.html),
using TLS or ssh transport. Sasl, ssl certificates or ssh can be used
for authentication depending on the choosen transport.

For ssh to be supported, users have to be able to login as root on the
machine running libvirtd, so that might be problematic. TLS transport
and ssl certificates might be the way to connect, but that would require
some tests.

`kvm(1)` and `qemu-kvm(1)` support a `reverse` option to their VNC
display, which tells them to what client IP:port the VNC server will
have to connect to. With this option, a developper could connect to
libvirtd, tell it to start X iso image and send the VNC display to the
client he/she started on his/her local machine. Cons of this method is
that the developper has to have a public IP address or setup port
forwarding if behind a NAT, so that the remote VNC server can connect to
his/her client. A VPN connection might be helpfull to circumvent this NAT
problem.


Resources
=========

## Buildbot

Buildbot can be seen as a [framework](http://jacobian.org/writing/buildbot/) to
deploy continuous integration. It has no real configuration file, but
what deserves this role is a file that can be thought programatically.
Thus it provide a very flexible environment that can be customize for
most projects needs.

Some interesting pages, might be worth reading for people willing to
play with buildbot and understand its logic :

* [Chromium's buildbot config](http://src.chromium.org/viewvc/chrome/trunk/tools/build),
  which is the one driving their [builbot instance](http://build.chromium.org/)
* [Buildbot's documentation](http://buildbot.net/buildbot/docs/latest/)

## Tests suites

- <http://live.debian.net/gitweb/?p=live-autobuild.git> is currently
  used to build "official" daily Debian Live images
- <http://git.debian.org/?p=debian-live/autotesting.git> and its
  [example results](http://autotesting.livecd.org/autotesting/current/)
- <http://git.webconverger.org/?p=build;a=summary>
- thread `Subject: Autotesting Update` on debian-live mailing-list
- http://autotest.kernel.org
- http://wiki.ubuntu.com/AutomatedTesting/
- grml's Michael Prokop talks about autotesting in KVM during his
  [talk at DebConf 10](http://penta.debconf.org/dc10_schedule/events/547.en.html)
- OpenSUSE's [OS-autoinst](http://www.os-autoinst.org/): sends
  key presses and takes snapshots over the KVM `-monitor` interface;
  seems like it currently provides no way to check what was successful
  and what failed
- Mozilla's [Automation QA team](http://quality.mozilla.org/teams/automation/)
- [Sikuli](https://launchpad.net/sikuli), visual technology to automate
  graphical user interfaces (GUI) using images (screenshots), used by Ubuntu,
  even has an IDE! It is now part of Debian ([[!debbug 578125]]).
- [buildbot](http://buildbot.net) : a continous integration bot, able to
  communicate over mail or IRC. Used by many projects.
