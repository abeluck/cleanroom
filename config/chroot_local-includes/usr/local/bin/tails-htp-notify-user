#!/usr/bin/perl

use strict;
use warnings;
use 5.10.1;

#man{{{

=head1 NAME

tails-htp-notify-user

=head1 VERSION

Version X.XX

=head1 AUTHOR

Tails dev team <tails@boum.org>
See https://tails.boum.org/.

=cut

#}}}

use Data::Dumper;
use Desktop::Notify;
use English '-no_match_vars';
use Locale::gettext;
use POSIX;

### initialization
setlocale(LC_MESSAGES, "");
textdomain("tails-htp-notify-user");
my $htp_pid_file    = '/var/run/htpdate/pid';
my $htp_success_file = '/var/run/htpdate/success';
my $htp_log_file     = '/var/log/htpdate.log';
my $debug;

### Enabling debug mode until the Squeeze regression is sorted out.
$debug = 1;

### subroutines

sub debug { say STDERR $_[0] unless $debug; }

### main

exit 0 if -e $htp_success_file;

my $notify = Desktop::Notify->new()
    or die "Failed creating Desktop::Notify object.";
debug('$notify:' . "\n" . Dumper($notify));

my $summary = gettext("Synchronizing the system's clock");
my $body    = gettext("Tor needs an accurate clock to work properly, especially for Hidden Services. Please wait...");

my $notification = $notify->create(summary => $summary,
                                   body => $body,
                                   timeout => 0)
    or die "Failed to create notification object";
debug('$notification:' . "\n" . Dumper($notification));

$notification->show() or warn "Failed showing notification.";

# Wait until htpdate's pid file exists and is readable, then get the pid
until (-r $htp_pid_file) {
    sleep 1;
}
open(my $fh, "<", $htp_pid_file) or die "Failed to open pid file";
chomp(my $htp_pid = <$fh>);
close($fh);

# FIXME: we can't use kill since we don't own the process, but there must
# be a more beautiful way than what we do below, no?

# Wait until the htpdate process is running
until ( -d "/proc/$htp_pid" ) {
    sleep 1;
}

# Wait until the htpdate process finishes
while  ( -d "/proc/$htp_pid" ) {
    sleep 1;
}

# in case htpdate went fine, close the 'Please wait...' notification
if (-e $htp_success_file) {
    $notification->close();
}
# in case htpdate failed, notify the user with the corresponding logs
else {
    open(my $htp_log, '<', $htp_log_file)
        or die "Can not open file '$htp_log_file': $OS_ERROR";
    my $last_log;
    while (<$htp_log>) {
        if ($_ =~ /^HTP NetworkManager hook: here we go/) {
            $last_log = '';
            next;
        }
        $last_log .= $_;
    }
    my $failure_summary      = gettext("Failed to synchronize the clock!");
    my $failure_body         = $last_log;
    my $failure_notification = $notify->create(summary => $failure_summary,
                                               body    => $failure_body,
                                               timeout => 0);
    $failure_notification->show();
}
