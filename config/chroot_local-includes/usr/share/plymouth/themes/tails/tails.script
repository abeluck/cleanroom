
MAX_MSG_DISPLAYED = 5;


# Display background image centered and scaled
Window.SetBackgroundTopColor (0, 0, 0);
Window.SetBackgroundBottomColor (0, 0, 0);

fun refresh_callback ()
  {
    # Currently we do nothing here
  }
  
Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Password dialog --------------------------------

status = "normal";

fun pw_dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    prompt.sprite = Sprite();
    prompt.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) /2;
    prompt.y = box.y + box.image.GetHeight()*0.1;
    prompt.z = box.z + 10;
    prompt.sprite.SetPosition(prompt.x, prompt.y, prompt.z);

    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()*0.7 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()*0.7 - entry.image.GetHeight()/2;
    entry.z = box.z + 2;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.pw_dialog.box = box;
    global.pw_dialog.prompt = prompt;
    global.pw_dialog.lock = lock;
    global.pw_dialog.entry = entry;
    global.pw_dialog.bullet_image = Image("bullet.png");
    pw_dialog_opacity (1);
  }
    
fun pw_dialog_opacity(opacity)
  {
    pw_dialog.box.sprite.SetOpacity (opacity);
    pw_dialog.prompt.sprite.SetOpacity (opacity);
    pw_dialog.lock.sprite.SetOpacity (opacity);
    pw_dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; pw_dialog.bullet[index]; index++)
      {
        pw_dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";

    if (!global.pw_dialog)
        pw_dialog_setup();
    else
        pw_dialog_opacity(1);

    pw_prompt_image = Image.Text(prompt, 0, 0, 0, 1);
    global.pw_dialog.prompt.sprite.SetImage(pw_prompt_image);

    for (index = 0; pw_dialog.bullet[index] || index < bullets; index++)
      {
        if ( ( (index + 2) * pw_dialog.bullet_image.GetWidth() ) < pw_dialog.entry.image.GetWidth() )
          {
            if (!pw_dialog.bullet[index])
              {
                pw_dialog.bullet[index].sprite = Sprite(pw_dialog.bullet_image);
                pw_dialog.bullet[index].x = pw_dialog.entry.x + (index+1) * pw_dialog.bullet_image.GetWidth();
                pw_dialog.bullet[index].y = pw_dialog.entry.y + pw_dialog.entry.image.GetHeight() / 2 - pw_dialog.bullet_image.GetHeight() / 2;
                pw_dialog.bullet[index].z = pw_dialog.entry.z + 1;
                pw_dialog.bullet[index].sprite.SetPosition(pw_dialog.bullet[index].x, pw_dialog.bullet[index].y, pw_dialog.bullet[index].z);
              }
            if (index < bullets)
              pw_dialog.bullet[index].sprite.SetOpacity(1);
            else
              pw_dialog.bullet[index].sprite.SetOpacity(0);
          }
      }
  }

Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Question dialog --------------------------------

fun dialog_setup()
  {
    local.box;
    local.entry;
    
    box.image = Image("box.png");
    entry_original_image = Image("entry.png");
    entry.image = entry_original_image.Scale(box.image.GetWidth() - 50, entry_original_image.GetHeight() );
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    prompt.sprite = Sprite();
    prompt.x = box.x + box.image.GetWidth()/2 - entry.image.GetWidth()/2;
    prompt.y = box.y + box.image.GetHeight()*0.1;
    prompt.z = box.z + 1;
    prompt.sprite.SetPosition(prompt.x, prompt.y, prompt.z);

    entry.sprite = Sprite(entry.image);
    entry.x = box.x + box.image.GetWidth()/2 - entry.image.GetWidth()/2;
    entry.y = box.y + box.image.GetHeight()*0.7 - entry.image.GetHeight()/2;
    entry.z = box.z + 2;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    text.sprite = Sprite();
    text.sprite.SetPosition(entry.x + 10, entry.y + 10, entry.z + 1);

    global.dialog.box = box;
    global.dialog.prompt = prompt;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.text = text;
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.prompt.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    dialog.text.sprite.SetOpacity (opacity);
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_question_callback (prompt, answer)
  {
    global.status = "question";
    if (!global.dialog)
        dialog_setup();
    else
        dialog_opacity(1);

    prompt_image = Image.Text(prompt, 0, 0, 0, 1);
    global.dialog.prompt.sprite.SetImage(prompt_image);
    answer_image = Image.Text(text, 0, 0, 0, 1);
    global.dialog.text.sprite.SetImage(answer_image);
  }

Plymouth.SetDisplayQuestionFunction(display_question_callback);

#----------------------------------------- Return to normal display --------------------

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.pw_dialog)
      pw_dialog_opacity (0);
    if (global.dialog)
      dialog_opacity (0);
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);

#----------------------------------------- Progress Bar --------------------------------

progress_box.image = Image("progress_box.png");
progress_box.sprite = Sprite(progress_box.image);
progress_box.x = Window.GetWidth()  / 2   - progress_box.image.GetWidth()  / 2;
progress_box.y = Window.GetHeight() * 0.7 - progress_box.image.GetHeight() / 2;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);

progress_bar.image = Image("progress_bar.png");
progress_bar.sprite = Sprite(progress_bar.image);
progress_bar.x = progress_box.x;
progress_bar.y = progress_box.y;
progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);

progress_text.image = Image.Text("Booting Tails", 0.4, 0.4, 0.4);
progress_text.sprite = Sprite(progress_text.image);
progress_text.x = Window.GetWidth()  / 2   - progress_text.image.GetWidth() / 2;
progress_text.y = Window.GetHeight() * 0.7 + progress_box.image.GetHeight();
progress_text.sprite.SetPosition(progress_text.x, progress_text.y, 1);

direction = 1;

fun progress_callback (duration, progress)
  {
    if ((progress_bar.image.GetWidth() + progress_bar.x) >= (progress_box.image.GetWidth() + progress_box.x))
        direction = -1;
    else if (progress_bar.x <= progress_box.x)
        direction = 1;

    progress_bar.x = progress_bar.x + direction;

    progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);
  }

Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(100, Window.GetHeight() - 70, 10000);

fun message_callback (text)
{
  message_image = Image.Text(text, 0.5, 0.5, 0.5);
  message_sprite.SetImage(message_image);
}

Plymouth.SetMessageFunction(message_callback);

#------------------------------- Root filesystem mount ---------------------------------
fun root_mounted_callback ()
  {
  }

Plymouth.SetRootMountedFunction(root_mounted_callback);

