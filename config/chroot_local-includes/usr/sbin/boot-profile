#!/usr/bin/env python

from pyinotify import WatchManager, Notifier, \
    ThreadedNotifier, ProcessEvent, IN_ACCESS
import re
import sys
import atexit
from signal import signal, SIGTERM
import os.path

# Ignore files matching this regular expression
IGNORE_RE = "^/(tmp|sys|proc|dev|live/cow)"

class ProfileProcessor(ProcessEvent):
    def __init__(self, new_profile):
        self.priority = 32767
        self.files = {}
        self.ignore_re = re.compile(IGNORE_RE)
        self.new_profile = new_profile

    def add_file(self, path):
        if not self.files.has_key(path):
            self.files[path] = self.priority
            self.priority -= 1

    def process_IN_ACCESS(self, event):
        self.add_file(event.pathname)

    def is_excluded(self, path):
        return self.ignore_re.match(path)

    def end_profiling(self):
        for path, priority in self.files.iteritems():
            self.new_profile.write("%-68s %s \n" % (path, priority))
        self.new_profile.close()

def main():
    if len(sys.argv) < 2:
        print >>sys.stderr, "usage: %s <new-profile>" % sys.argv[0]
        sys.exit(0)

    new_profile = open(sys.argv[1], 'w')

    wm = WatchManager()
    profiler = ProfileProcessor(new_profile)

    atexit.register(profiler.end_profiling)
    signal(SIGTERM, lambda signum, stack_frame: sys.exit(0))

    notifier = Notifier(wm, profiler)
    wm.add_watch('/', IN_ACCESS, rec=True, exclude_filter=profiler.is_excluded)
    notifier.loop(daemonize=True)

if __name__ == '__main__':
    main()
