#!/bin/sh

# Usage: ./release NEW_VERSION [ dev ]
# 
# If "dev" is supplied as the second argument, a development snapshot
# is done rather than a real release, i.e.:
#    * the --snapshot option is passed to git-dch

### source the configuration files

. config/amnesia
if [ -e config/amnesia.local ] ; then
   . config/amnesia.local
fi

### init variables

NEW_VERSION="$1"
if [ "$2" = dev ]; then
   SNAPSHOT=yes
else
   SNAPSHOT=no
fi

### helper functions

fatal () {
   echo "Fatal: $@" >&2
   exit 2
}

### sanity checks

[ -n "${NEW_VERSION}" ] \
   || fatal "the new version must be supplied on the command-line."
[ -x "`which git`" ] \
   || fatal "could not find git, please apt-get install git-core"
[ -x "`which git-dch`" ] \
   || fatal "could not find git-dch, please apt-get install git-buildpackage"
[ -x "`which debcommit`" ] \
   || fatal "could not find debcommit, please apt-get install devscripts"
[ -x "`which dpkg-parsechangelog`" ] \
   || fatal "could not find dpkg-parsechangelog, please apt-get install dpkg-dev"

### main

export DEBFULLNAME="${AMNESIA_DEV_FULLNAME}"
export DEBEMAIL="${AMNESIA_DEV_EMAIL}"
export DEBSIGN_KEYID="${AMNESIA_DEV_KEYID}"

# update the Changelog
echo "Updating debian/changelog from Git history..."
git-dch `if [ ${SNAPSHOT} = yes ]; then echo '--snapshot --auto' ; else echo '--release' ; fi` \
   --new-version="${NEW_VERSION}" \
   || fatal "git-dch failed."

# get the Debian version git-dch created
NEW_DEBIAN_VERSION=`dpkg-parsechangelog | sed -n 's/^Version: //p'`
[ -n "${NEW_DEBIAN_VERSION}" ] || fatal "new Debian version could not be guessed."

# commit and tag the release
if [ "${SNAPSHOT}" = no ]; then
   debcommit --sign-tags --release \
      --message "releasing version ${NEW_DEBIAN_VERSION}" \
      debian/changelog
fi
